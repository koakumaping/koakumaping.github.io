[{"title":"Windows环境下Atom的代理设置","date":"2016-09-03T12:57:44.000Z","path":"posts/setting/2016/09/03/Windows环境下Atom的代理设置/","text":"我用的代理软件是Shaowsocks，相信大家都不会陌生，没有用过的可以关闭网页了。 设置方法打开C:\\Users\\xxx\\下的.atom文件夹里的.apmrc文件,添加以下三行配置即可: http-proxy=http://127.0.0.1:1080https-proxy=http://127.0.0.1:1080strict-ssl=false 如果找不到.apmrc文件,就从.apm文件夹里复制一个出来.","tags":[{"name":"ATOM","slug":"ATOM","permalink":"http://nag24.org/tags/ATOM/"},{"name":"windows","slug":"windows","permalink":"http://nag24.org/tags/windows/"}]},{"title":"DOM监听绑定解绑的简便方法","date":"2016-08-16T08:14:45.000Z","path":"posts/programming/2016/08/16/DOM监听绑定解绑的简便方法/","text":"通常的做法我想大多数人都是这么做的const handler = function () &#123; console.log(\"Hondo!\")&#125;// 绑定element.addEventListener(\"click\", handler)// 解绑element.removeEventListener(\"click\", handler) 你也可以使用这种自己解除绑定的方式element.addEventListener('click', function clickAction(e) &#123; if (someCondition) &#123; return e.currentTarget.removeEventListener('click', clickAction) &#125;&#125;) 更好的做法我这里提供一个个人认为比较好的方式，有知道更好的方式的请留言function handleEvent (eventName, &#123;onElement, withCallback, useCapture = false&#125; = &#123;&#125;, thisArg) &#123; const element = onElement || document.documentElement function handler (event) &#123; if (typeof withCallback === 'function') &#123; withCallback.call(thisArg, event) &#125; &#125; handler.destroy = function () &#123; return element.removeEventListener(eventName, handler, useCapture) &#125; element.addEventListener(eventName, handler, useCapture) return handler&#125;// 当你需要绑定某个元素的时候const handleClick = handleEvent('click', &#123; onElement: element, withCallback: (event) =&gt; &#123; console.log('Hondo!') &#125;&#125;)// 当你不想用的时候handleClick.destroy()","tags":[{"name":"HTML","slug":"HTML","permalink":"http://nag24.org/tags/HTML/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://nag24.org/tags/JavaScript/"},{"name":"DOM","slug":"DOM","permalink":"http://nag24.org/tags/DOM/"}]},{"title":"HTML中的空格研究","date":"2016-08-10T02:42:56.000Z","path":"posts/programming/2016/08/10/HTML中的空格研究/","text":"HTML支持的空格 Unicode 编码 HTML代码 名称 实际效果 U+00A0 &amp;nbsp; 不换行空格（No-Break Space） Test&nbsp;Space U+2002 &amp;ensp; En 空格（En Space）或 Nut Test&ensp;Space U+2003 &amp;emsp; Em 空格（Em Space）或 Mutton Test&emsp;Space U+2009 &amp;thinsp; 窄空格（Thin Space） Test&thinsp;Space U+200C &amp;zwnj; 零宽不连字（Zero Width Non Joiner，简称“ZWNJ”） Test&zwnj;Space U+200D &amp;zwj; 零宽连字（Zero Width Joiner，简称“ZWJ”） Test&zwj;Space 重点我讲下能运用到实际项目中去的三个 代码&lt;div&gt;姓&amp;emsp;&amp;emsp;名&lt;/div&gt;&lt;div&gt;手&amp;ensp;机&amp;ensp;号&lt;/div&gt;&lt;div&gt;家庭地址&lt;/div&gt; 实际效果 姓&emsp;&emsp;名手&ensp;机&ensp;号家庭地址 说明&emsp;&emsp;&amp;ensp;,&amp;emsp;,&amp;thinsp; 这三个空格都会根据不同的字体大小产生相应的空白大小，分别是 1/2em，1em，1/6em（有时被设计成1/5em）宽 &emsp;&emsp;如果你使用的是等宽字体（中文基本都是等宽字体），那么&amp;emsp;和&amp;ensp;所产生的空白大小与中文字大小具有明确的比例关系（一个&amp;ensp;等于半个中文字的宽度，而一个&amp;emsp;则是一个中文字的宽度），因此这类空格很适合用于控制排版，就比如上面的代码所展示的那样。","tags":[{"name":"HTML","slug":"HTML","permalink":"http://nag24.org/tags/HTML/"}]},{"title":"js清除数组中的空元素","date":"2016-07-26T03:05:16.000Z","path":"posts/programming/2016/07/26/js清除数组中的空元素/","text":"var arr = ['test', '', 'nag24']arr.filter(function(n) &#123; return n&#125;);","tags":[{"name":"javascript","slug":"javascript","permalink":"http://nag24.org/tags/javascript/"}]},{"title":"js获得某个月的天数","date":"2016-06-15T07:36:30.000Z","path":"posts/programming/2016/06/15/js获得某个月的天数/","text":"function getDays(year, month) &#123; return new Date(year, month + 1, 0).getDate();&#125;","tags":[{"name":"javascript","slug":"javascript","permalink":"http://nag24.org/tags/javascript/"}]},{"title":"给placeholder增加动画效果","date":"2016-05-31T04:17:25.000Z","path":"posts/programming/2016/05/31/给placeholder增加动画效果/","text":"定义在 HTML5 placeholder 中，意为占位符。常会在表单中用一些简单的单词进行提示，友好的提示用户录入数据。该提示会在文本区域为空时显示，当字段获得焦点时消失。 在 W3C 中，定义占位符为一个简单的提示（一个词语或一个短语），在帮助用户进行数据录入。若想录入较长的提示，建议在当前操作旁注明提示信息，而不是使用 placeholder。 The placeholder attribute represents a short hint (a word or short phrase) intended to aid the user with data entry. A hint could be a sample value or a brief description of the expected format. The attribute, if specified, must have a value that contains no U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters. 伪类更改字体的颜色直接用下面这种方式是没法改变placeholder的字体颜色的input[placeholder] &#123; color: red;&#125; fail demo: 改变placeholder的字体颜色失败示例 这时候伪类就出现啦/* WebKit browsers */input[placeholder]::-webkit-input-placeholder &#123; color: red;&#125;/* Mozilla Firefox 4 to 18 */input[placeholder]:focus:-moz-placeholder &#123; color: red;&#125;/* Mozilla Firefox 19+ */input[placeholder]::-moz-placeholder &#123; color: red;&#125;/* Internet Explorer 10+ */input[placeholder]:-ms-input-placeholder &#123; color: red;&#125; sucess demo: 改变placeholder的字体颜色成功示例 增加动画效果只要结合transition就可以做出很漂亮的动画效果这边还用到了:focus伪类，该伪类在鼠标焦点在输入框的时候生效 /* WebKit browsers */input[placeholder]::-webkit-input-placeholder &#123; transform: translate(0, 0); transition: all 0.5s ease;&#125;/* Mozilla Firefox 4 to 18 */input[placeholder]:focus:-moz-placeholder &#123; transform: translate(0, 0); transition: all 0.5s ease;&#125;/* Mozilla Firefox 19+ */input[placeholder]::-moz-placeholder &#123; transform: translate(0, 0); transition: all 0.5s ease;&#125;/* Internet Explorer 10+ */input[placeholder]:-ms-input-placeholder &#123; transform: translate(0, 0); transition: all 0.5s ease;&#125;/* WebKit browsers */input[placeholder]:focus::-webkit-input-placeholder &#123; transition: all 0.5s ease; transform: translate(50px, 0); opacity: 0;&#125;/* Mozilla Firefox 4 to 18 */input[placeholder]:focus:-moz-placeholder &#123; transition: all 0.5s ease; transform: translate(50px, 0); opacity: 0;&#125;/* Mozilla Firefox 19+ */input[placeholder]:focus::-moz-placeholder &#123; transition: all 0.5s ease; transform: translate(50px, 0); opacity: 0;&#125;/* Internet Explorer 10+ */input[placeholder]:focus:-ms-input-placeholder &#123; transition: all 0.5s ease; transform: translate(50px, 0); opacity: 0;&#125; placeholder动画demo","tags":[{"name":"css","slug":"css","permalink":"http://nag24.org/tags/css/"}]},{"title":"setTimeout暂停功能的实现","date":"2016-05-27T02:16:50.000Z","path":"posts/programming/2016/05/27/setTimeout暂停功能的实现/","text":"直接上代码吧，最直接了。 HTML&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width\"&gt; &lt;title&gt;JS Bin&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=\"button\" value=\"pause\" onclick=\"timer.pause()\"&gt; &lt;input type=\"button\" value=\"resume\" onclick=\"timer.resume()\"&gt; &lt;div&gt;Count: &lt;b id=\"counter\"&gt;0&lt;/b&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; JavaScriptfunction RecurringTimer(callback, delay) &#123; var timerId, start, remaining = delay; this.pause = function() &#123; window.clearTimeout(timerId); remaining -= new Date() - start; &#125;; var resume = function() &#123; start = new Date(); timerId = window.setTimeout(function() &#123; remaining = delay; resume(); callback(); &#125;, remaining); &#125;; this.resume = resume; this.resume();&#125;var timer = new RecurringTimer(function() &#123; document.getElementById(\"counter\").innerHTML = ++count;&#125;, 1000);var count = 0; Result timeDown","tags":[{"name":"javascript","slug":"javascript","permalink":"http://nag24.org/tags/javascript/"}]},{"title":"javascript中判断是否为一个函数的方法","date":"2016-05-26T08:02:46.000Z","path":"posts/programming/2016/05/26/javascript中判断是否为一个函数的方法/","text":"用Object.prototype.toString()来实现，这个函数可以获得对象的内部属性（class），函数执行过程如下： Get the [[Class]] property of this object. Compute a string value by concatenating the three strings “[object “, Result (1), and “]”. Return Result (2) 使用方法function isFunction(fn) &#123; return Object.prototype.toString.call(fn) === '[object Function]';&#125; 其实还能够判断Array,String,Data,Function,Boolean,Number等类型，非常好的一个方法 参考资料Object.prototype.toString()","tags":[{"name":"javascript","slug":"javascript","permalink":"http://nag24.org/tags/javascript/"}]},{"title":"Github Pages绑定阿里云(万网)申请的域名","date":"2016-05-26T02:33:23.000Z","path":"posts/programming/2016/05/26/Github-Pages绑定阿里云-万网-申请的域名/","text":"起因昨天申请了了http://nag24.org的域名，google到了一篇文章GitHub Pages 绑定来自阿里云的域名，按照他的方法试了很久，一直404 我的方法其实很简单的 添加CNAME文件到根目录,里面写nag24.org 在阿里云域名控制台中的解析设置中添加一条CNAME记录，如下图所示 等待生效 大概就几分钟吧，访问http://nag24.org就能正确显示了 注意事项 CNAME文件必须添加，里面的域名不能带有http://前缀，不然即使你域名解析设置正确了访问你自己的域名Github Pages会提示404 用CNAME解析就足够了。如果想要解析成类似http://blog.nag24.org你可以把主机记录中的@改成blog","tags":[{"name":"Github","slug":"Github","permalink":"http://nag24.org/tags/Github/"},{"name":"域名","slug":"域名","permalink":"http://nag24.org/tags/域名/"}]},{"title":"webpack打包项目中添加favicon.ico","date":"2016-05-23T01:27:51.000Z","path":"posts/programming/2016/05/23/webpack打包项目中添加favicon-ico/","text":"添加方法 把favicon.ico放入src/assets/images/favicon.ico目录 在main.js中require favicon require('../assets/images/favicon.ico') 在build/webpack.base.conf.js中添加loader &#123; test: /\\.ico$/, loader: 'file-loader?name=[name].[ext]'&#125;, 在index.html中添加语句 &lt;link rel=\"shortcut icon\" href=\"favicon.ico\"&gt;","tags":[{"name":"webpack","slug":"webpack","permalink":"http://nag24.org/tags/webpack/"}]},{"title":"删除windows中路径过长的目录及文件","date":"2016-05-12T01:17:00.000Z","path":"posts/programming/2016/05/12/删除windows中路径过长的目录及文件/","text":"我使用的是robocopy的方式robocopy empty_dir will_delete_dir /purge empty_dir 新建的空白目录 will_delete_dir 要删除的目录 注意中间的空格 可以用来删除npm的安装目录node_modules下无法直接删除的文件 使用方法 新建空白目录，如D:\\temp； 管理员方式打开命令行窗口； 输入robocopy D:\\temp D:\\project\\node_modules /purge。","tags":[{"name":"windows","slug":"windows","permalink":"http://nag24.org/tags/windows/"}]}]